/** ****************************************************************************************************
 * @file
 * @brief GUIボタン機能
 **************************************************************************************************** */
#pragma once

#include <Siv3D.hpp>

namespace MySystem
{
	/** ****************************************************************************************************
	 * @brief 文字付GUIボタンクラス
	 **************************************************************************************************** */
	class TextButtonGUI
	{
	private:
		class Impl;
		std::unique_ptr<Impl> _pImpl;

	public:
		TextButtonGUI() = delete;
		TextButtonGUI(const TextButtonGUI&) = delete;
		TextButtonGUI& operator=(const TextButtonGUI&) = delete;

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] label		表示文字
		 * @param[in] position	表示位置
		 * @param[in] width		表示サイズ
		 **************************************************************************************************** */
		TextButtonGUI(const String& label, const Vec2& position, const double width);

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] label		表示文字
		 * @param[in] position	表示位置
		 * @param[in] width		表示サイズ
		 * @param[in] isTrigger	トリガーボタンにするか
		 **************************************************************************************************** */
		TextButtonGUI(const String& label, const Vec2& position, const double width, const bool isTrigger);

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] label		表示文字
		 * @param[in] position	表示位置
		 * @param[in] width		表示サイズ
		 * @param[in] isTrigger	トリガーボタンにするか
		 * @param[in] enable	有効化するか
		 **************************************************************************************************** */
		TextButtonGUI(const String& label, const Vec2& position, const double width, const bool isTrigger, const bool enable);

		/** ****************************************************************************************************
		 * @brief デストラクタ
		 **************************************************************************************************** */
		~TextButtonGUI();

		/** ****************************************************************************************************
		 * @brief				更新処理
		 * @param[in] parent	親座標
		 * @retval true			マウスが乗っている
		 * @retval false		マウスが乗っていない
		 **************************************************************************************************** */
		bool Update(const Vec2& parent = Vec2{ 0.0, 0.0 }) noexcept;

		/** ****************************************************************************************************
		 * @brief				描画処理
		 * @param[in] parent	親座標
		 **************************************************************************************************** */
		void Draw(const Vec2& parent = Vec2{ 0.0, 0.0 }) const noexcept;

		/** ****************************************************************************************************
		 * @brief				表示位置設定
		 * @param[in] position	表示位置
		 * @return				自身の参照
		 **************************************************************************************************** */
		TextButtonGUI& SetPosition(const Vec2& position) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示位置取得
		 * @return	表示位置
		 **************************************************************************************************** */
		[[nodiscard]]
		Vec2 GetPosition() const noexcept;

		/** ****************************************************************************************************
		 * @brief			表示サイズ設定
		 * @param[in] width	表示サイズ
		 * @return			自身の参照
		 **************************************************************************************************** */
		TextButtonGUI& SetSize(const double width) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示サイズ取得
		 * @return	表示サイズ
		 **************************************************************************************************** */
		[[nodiscard]]
		Vec2 GetSize() const noexcept;

		/** ****************************************************************************************************
		 * @brief				有効化するか設定
		 * @param[in] enable	有効化するか
		 * @return				自身の参照
		 **************************************************************************************************** */
		TextButtonGUI& SetEnable(const bool enable) noexcept;

		/** ****************************************************************************************************
		 * @brief			有効かどうか取得
		 * @retval true		有効
		 * @retval false	無効
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetEnable() const noexcept;

		/** ****************************************************************************************************
		 * @brief				トリガーボタンか設定
		 * @param[in] isTrigger	トリガーボタンかどうか
		 * @return				自身の参照
		 **************************************************************************************************** */
		TextButtonGUI& SetIsTrigger(const bool isTrigger) noexcept;

		/** ****************************************************************************************************
		 * @brief			トリガーボタンかどうか取得
		 * @retval true		トリガーボタン
		 * @retval false	プッシュボタン
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetIsTrigger() const noexcept;

		/** ****************************************************************************************************
		 * @brief			ボタンを押したかどうか取得
		 * @retval true		押した
		 * @retval false	押していない
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetIsOn() const noexcept;

		/** ****************************************************************************************************
		 * @brief			表示文字設定
		 * @param[in] text	表示文字
		 * @return			自身の参照
		 **************************************************************************************************** */
		TextButtonGUI& SetText(const String& text) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示文字取得
		 * @return	表示文字
		 **************************************************************************************************** */
		[[nodiscard]]
		String GetText() const noexcept;
	};

	/** ****************************************************************************************************
	 * @brief 画像付GUIボタンクラス
	 **************************************************************************************************** */
	class ImageButtonGUI
	{
	private:
		class Impl;
		std::unique_ptr<Impl> _pImpl;

	public:
		ImageButtonGUI() = delete;
		ImageButtonGUI(const ImageButtonGUI&) = delete;
		ImageButtonGUI& operator=(const ImageButtonGUI&) = delete;

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] path		表示画像のファイルパス
		 * @param[in] position	表示位置
		 * @param[in] size		表示サイズ
		 **************************************************************************************************** */
		ImageButtonGUI(const String& path, const Vec2& position, const Vec2 size);

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] path		表示画像のファイルパス
		 * @param[in] position	表示位置
		 * @param[in] size		表示サイズ
		 * @param[in] isTrigger	トリガーボタンにするか
		 **************************************************************************************************** */
		ImageButtonGUI(const String& path, const Vec2& position, const Vec2 size, const bool isTrigger);

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @param[in] path		表示画像のファイルパス
		 * @param[in] position	表示位置
		 * @param[in] size		表示サイズ
		 * @param[in] isTrigger	トリガーボタンにするか
		 * @param[in] enable	有効化するか
		 **************************************************************************************************** */
		ImageButtonGUI(const String& path, const Vec2& position, const Vec2 size, const bool isTrigger, const bool enable);

		/** ****************************************************************************************************
		 * @brief デストラクタ
		 **************************************************************************************************** */
		~ImageButtonGUI();


		/** ****************************************************************************************************
		 * @brief			更新処理
		 * @retval true		マウスが乗っている
		 * @retval false	マウスが乗っていない
		 **************************************************************************************************** */
		bool Update(const Vec2& parent = Vec2{ 0.0, 0.0 }) noexcept;

		/** ****************************************************************************************************
		 * @brief	描画処理
		 **************************************************************************************************** */
		void Draw(const Vec2& parent = Vec2{ 0.0, 0.0 }) const noexcept;

		/** ****************************************************************************************************
		 * @brief				表示位置設定
		 * @param[in] position	表示位置
		 * @return				自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetPosition(const Vec2& position) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示位置取得
		 * @return	表示位置
		 **************************************************************************************************** */
		[[nodiscard]]
		Vec2 GetPosition() const noexcept;

		/** ****************************************************************************************************
		 * @brief			表示サイズ設定
		 * @param[in] size	表示サイズ
		 * @return			自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetSize(const Vec2& size) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示サイズ取得
		 * @return	表示サイズ
		 **************************************************************************************************** */
		[[nodiscard]]
		Vec2 GetSize() const noexcept;

		/** ****************************************************************************************************
		 * @brief	円形時表示サイズ取得
		 * @return	表示サイズ
		 **************************************************************************************************** */
		[[nodiscard]]
		double GetRadius() const noexcept;

		/** ****************************************************************************************************
		 * @brief				有効化するか設定
		 * @param[in] enable	有効化するか
		 * @return				自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetEnable(const bool enable) noexcept;

		/** ****************************************************************************************************
		 * @brief			有効かどうか取得
		 * @retval true		有効
		 * @retval false	無効
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetEnable() const noexcept;

		/** ****************************************************************************************************
		 * @brief				トリガーボタンか設定
		 * @param[in] isTrigger	トリガーボタンかどうか
		 * @return				自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetIsTrigger(const bool isTrigger) noexcept;

		/** ****************************************************************************************************
		 * @brief			トリガーボタンかどうか取得
		 * @retval true		トリガーボタン
		 * @retval false	プッシュボタン
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetIsTrigger() const noexcept;

		/** ****************************************************************************************************
		 * @brief				円形で表示するか設定
		 * @param[in] isTrigger	円形で表示するかどうか
		 * @return				自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetIsCircle(const bool isCircle) noexcept;

		/** ****************************************************************************************************
		 * @brief			円形で表示するかどうか取得
		 * @retval true		円形
		 * @retval false	矩形
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetIsCircle() const noexcept;

		/** ****************************************************************************************************
		 * @brief			ボタンを押したかどうか取得
		 * @retval true		押した
		 * @retval false	押していない
		 **************************************************************************************************** */
		[[nodiscard]]
		bool GetIsOn() const noexcept;

		/** ****************************************************************************************************
		 * @brief			表示画像設定
		 * @param[in] path	ファイルパス
		 * @return			自身の参照
		 **************************************************************************************************** */
		ImageButtonGUI& SetTexture(const String& path) noexcept;

		/** ****************************************************************************************************
		 * @brief	表示画像取得
		 * @return	表示画像
		 **************************************************************************************************** */
		[[nodiscard]]
		Texture GetTexture() const noexcept;
	};
}
