/** ****************************************************************************************************
 * @file
 * @brief ステージ操作関連
 **************************************************************************************************** */
#pragma once

#include <Siv3D.hpp>
#include "../Data/StageData.h"
#include "../Data/GimmickData.h"

namespace MySystem
{
	/** ****************************************************************************************************
	 * @brief ステージ操作関連
	 **************************************************************************************************** */
	class Stage
	{
	private:
		class Impl;
		std::unique_ptr<Impl> _pImpl;

	public:
		Stage() = delete;
		Stage(const Stage&) = delete;
		Stage& operator=(const Stage&) = delete;

		/** ****************************************************************************************************
		 * @brief				コンストラクタ
		 * @oaram[in] position	場所
		 * @param[in] scale		大きさ
		 * @param[in] angle		角度
		 * @param[in] pParent	親
		 **************************************************************************************************** */
		Stage(const Vec2& position, const Vec2& scale, const double angle, class Transform* pParent) noexcept;

		/** ****************************************************************************************************
		 * @brief デストラクタ
		 **************************************************************************************************** */
		~Stage();

		/** ****************************************************************************************************
		 * @brief 更新
		 **************************************************************************************************** */
		void Update() noexcept;

		/** ****************************************************************************************************
		 * @brief 描画
		 **************************************************************************************************** */
		void Draw() const noexcept;

		/** ****************************************************************************************************
		 * @brief ステージ生成
		 **************************************************************************************************** */
		void CreateStage() noexcept;

		/** ****************************************************************************************************
		 * @brief					ステージ生成
		 * @param[in] worldIndex	生成するワールド番号
		 * @param[in] stageIndex	生成するステージ番号
		 **************************************************************************************************** */
		void CreateStage(const StageData::WorldIndex worldIndex, const StageData::StageIndex stageIndex) noexcept;

		/** ****************************************************************************************************
		 * @brief ゲームクリアにする
		 **************************************************************************************************** */
		void SetGameClear();

		/** ****************************************************************************************************
		 * @brief 縮小過多によるゲームオーバーにする
		 **************************************************************************************************** */
		void SetGameOverPlayerScaleOut();

		/** ****************************************************************************************************
		 * @brief 落下によるゲームオーバーにする
		 **************************************************************************************************** */
		void SetGameOverPlayerFallOut();

		/** ****************************************************************************************************
		 * @brief			ステージ読み込み待ちか確認
		 * @retval true		待っている
		 * @retval false	待っていない
		 **************************************************************************************************** */
		bool LoadStageWait();

		/** ****************************************************************************************************
		 * @brief			ステージ選択読み込み待ちか確認
		 * @retval true		待っている
		 * @retval false	待っていない
		 **************************************************************************************************** */
		bool LoadSelectWait();

		/** ****************************************************************************************************
		 * @brief				プレイヤー生成
		 * @oaram[in] data		生成用データ
		 * @param[in] pParent	親
		 * @return				生成したギミック
		 **************************************************************************************************** */
		std::weak_ptr<GimmickData::Gimmick> CreatePlayer(const GimmickData::Desc& data, Transform* pParent);

		/** ****************************************************************************************************
		 * @brief				ゴール生成
		 * @oaram[in] data		生成用データ
		 * @param[in] pParent	親
		 * @return				生成したギミック
		 **************************************************************************************************** */
		std::weak_ptr<GimmickData::Gimmick> CreateGoal(const GimmickData::Desc& data, Transform* pParent);

		/** ****************************************************************************************************
		 * @brief			大きさ設定
		 * @param[in] scale	新しい大きさ
		 **************************************************************************************************** */
		void SetLocalScale(const Vec2& scale) noexcept;
	};
}


