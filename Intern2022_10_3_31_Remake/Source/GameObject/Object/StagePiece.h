/** ****************************************************************************************************
 * @file
 * @brief ステージのカケラ操作関連
 **************************************************************************************************** */
#pragma once

#include <Siv3D.hpp>
#include "../Data/StagePieceData.h"

namespace MySystem
{
	/** ****************************************************************************************************
	 * @brief ステージのカケラ操作関連
	 **************************************************************************************************** */
	class StagePiece
	{
	private:
		class Impl;
		std::unique_ptr<Impl> _pImpl;

	public:
		StagePiece() = delete;
		StagePiece(const StagePiece&) = delete;
		StagePiece& operator=(const StagePiece&) = delete;

		/** ****************************************************************************************************
		 * @brief					コンストラクタ
		 * @oaram[in] data			生成用データ
		 * @param[in] pieceNumber	生成された順番
		 * @param[in] pStage		所属するステージ
		 * @param[in] pParent		親
		 **************************************************************************************************** */
		StagePiece(const StagePieceData::Desc& data, const uint8 pieceNumber, class Stage* pStage, class Transform* pParent) noexcept;

		/** ****************************************************************************************************
		 * @brief デストラクタ
		 **************************************************************************************************** */
		~StagePiece();

		/** ****************************************************************************************************
		 * @brief 更新
		 **************************************************************************************************** */
		void Update() noexcept;

		/** ****************************************************************************************************
		 * @brief 描画
		 **************************************************************************************************** */
		void Draw() const noexcept;

		/** ****************************************************************************************************
		 * @brief			カケラの更新処理
		 * @retval true		アクションがあった
		 * @retval false	アクションがなかった
		 **************************************************************************************************** */
		bool UpdatePiece() noexcept;

		/** ****************************************************************************************************
		 * @brief				有効かどうか設定
		 * @param[in] isActive	有効かどうか
		 **************************************************************************************************** */
		void SetActive(const bool isActive) noexcept;

		/** ****************************************************************************************************
		 * @brief	自身の持つ地面の当たり判定取得
		 * @return	地面の当たり判定
		 **************************************************************************************************** */
		Array<Polygon> GetLocalHitBoxes() const;

		/** ****************************************************************************************************
		 * @brief	自身の持つ地面のワールド内の当たり判定取得
		 * @return	地面の当たり判定
		 **************************************************************************************************** */
		Array<Polygon> GetWorldHitBoxes() const;

		/** ****************************************************************************************************
		 * @brief	自身の当たり判定取得
		 * @return	当たり判定
		 **************************************************************************************************** */
		Quad GetLocalBody() const;

		/** ****************************************************************************************************
		 * @brief	自身のワールド内の当たり判定取得
		 * @return	当たり判定
		 **************************************************************************************************** */
		Quad GetWorldBody() const;

		/** ****************************************************************************************************
		 * @brief	カケラの種類取得
		 * @return	カケラの種類
		 **************************************************************************************************** */
		StagePieceData::Type GetType() const;

		/** ****************************************************************************************************
		 * @brief	所属するギミック取得
		 * @return	所属するギミック
		 **************************************************************************************************** */
		Array<std::weak_ptr<GimmickData::Gimmick>> GetGimmicks() const;

		/** ****************************************************************************************************
		 * @brief				ギミックを所属させる
		 * @param[in] pGimmick	所属したいギミック
		 **************************************************************************************************** */
		void AddGimmick(std::weak_ptr<GimmickData::Gimmick> pGimmick);

		/** ****************************************************************************************************
		 * @brief 有効状態のギミックを削除する
		 **************************************************************************************************** */
		void DeleteActiveGimmicks();

		/** ****************************************************************************************************
		 * @brief	角度の取得
		 * @return	角度
		 **************************************************************************************************** */
		double GetAngle();
	};
}
